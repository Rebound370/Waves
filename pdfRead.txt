Exercise
CSC355OpenSourceDevelopment
05October2020
1
#numpyisalibrarythatgives
2
#methodsforworkingwitharrays,
3
#vectors,andmatrices
4
import
numpyasnp
5
6
#PIListhePythonImagingLibrary
7
#Pillowisafork(acopy)ofPIL
8
#Pillowwillbeourprincipalexample
9
#ofanopensourceproject
10
from
PIL
import
Image
11
12
#TO

DO:Experimentwithdifferentvalues
13
#fortheseconstants.Theydeterminethe
14
#sizeoftheimagethatthisprogramdraws.
15
WIDTH=512
16
HEIGHT=512
17
18
#Pointisaclassthatmodelsapointintheplane.
19
class
Point:
20
#
init
()istheclass'constructor.
21
def
init
(self,x,y):
22
self.x=x
23
self.y=y
24
#
init
()
25
26
#distance()isamethodthatcomputes
27
#theEuclidean(asthebirdflies)distance
28
#betweenthispointandanotherpoint
29
def
distance(self,otherPoint):
30
dx=self.x

otherPoint.x
31
dy=self.y

otherPoint.y
32
return
np.sqrt(dx

2+dy

2)
33
#distance()
34
35
#
str
isamethodthatproduces
1
36
#string(aprintablerepresentationofthispoint)
37
def
str
(self):
38
return
f'(
f
self.x:6.2f
g
,
f
self.y:6.2f
g
)'
39
#
str
()
40
#Point
41
42
#Waveisaclassthatmodelsasinewave.
43
#
44
#Thewaveradiatesfromapoint(itscenter).
45
#
46
#Thecrestsofthewavehaveaheightandthe
47
#troughshaveadepth.'Amplitude'isthename
48
#forthemagnitudeoftheheightanddepth.
49
#
50
#Thewavelengthisthedistancebetweensuccessivecrests.
51
#
52
#Thephaseisameasureofthedistancebetweenthecenter
53
#andthefirstcrest.
54
class
Wave:
55
def
init
(self,center,amplitude,wavelength,phase):
56
self.center=center
57
self.amplitude=amplitude
58
self.wavelength=wavelength
59
self.phase=phase
60
#
init
()
61
62
#height()isamethodthatcomputestheheight
63
#ofthewaveatagivenpointintheplane
64
def
height(self,point):
65
r=point.distance(self.center)
66
angle=2.0

np.pi

r/self.wavelength+self.phase
67
return
self.amplitude

np.sin(angle)
68
#height()
69
70
#Wave
71
72
#InterferingWavesisaclassthatmodelsacollection
73
#ofwaves(thinkofseveralpebblestossedintoastill
74
#pondatthesametimeandhowtheripplesthatspread
75
#fromthepointswherethestonesenterthewaterwill
76
#collide).
77
class
InterferingWaves:
78
#theconstructorcreatesanemptycollection
79
def
init
(self):
80
self.waves=
list
()
81
#
init
()
2
82
83
#addWave()isamethodforaddingawaveto
84
#thecollection
85
def
addWave(self,wave):
86
self.waves.append(wave)
87
#addWave()
88
89
#height()isamethodforcomputingthe
90
#heightofthewateratagivenpointinthe
91
#plane.Thisheightisthesumoftheheights
92
#ofallofthewavesthatmeetatthatpoint.
93
def
height(self,point):
94
sum
=0.0
95
96
for
wave
in
self.waves:
97
sum
+=wave.height(point)
98
99
returnsum
100
#height()
101
102
#InterferingWaves
103
104
class
CoordinateSystem:
105
#Defineacoordinatesystembyspecifyingthe
106
#coordinatesofitslowerleftcornerandits
107
#upperrightcorner.
108
def
init
(self,xMin,yMin,xMax,yMax):
109
self.xMin=xMin
110
self.yMin=yMin
111
112
self.xMax=xMax
113
self.yMax=yMax
114
#
init
()
115
116
#Givenapointinthissystem,produceanewpoint(x,y)
117
#where0.0
<
=x,y
<
=1.0.
118
#Thevaluesofthecomponentsofthenewpointrepresent
119
#fractionsofthesystem'swidthandheight,respectively.
120
def
normalize(self,point):
121
x=(point.x

self.xMin)/(self.xMax

self.xMin)
122
y=(point.y

self.yMin)/(self.yMax

self.yMin)
123
124
return
Point(x,y)
125
#normalize()
126
127
#Givenanormalizedpoint(0.0
<
=x,y
<
=1.0),produce
3
128
#anewpointsuchthatxMin
<
=x
<
=xMaxandyMin
<
=y
<
=yMax.
129
def
scaleAndTranslate(self,point):
130
x=self.xMin+point.x

(self.xMax

self.xMin)
131
y=self.yMin+point.y

(self.yMax

self.yMin)
132
133
return
Point(x,y)
134
#scaleAndTranslate()
135
136
#CoordinateSystem
137
138
#Transformationmodelsaclassthatcontains
139
#knowledgeoftwocoordinatesystemsandthemeans
140
#ofconvertingbetweencoordinatesgiveninone
141
#systemandcoordinatesgivenintheothersystem.
142
class
Transform:
143
def
init
(self,source,destination):
144
self.source=source
145
self.destination=destination
146
#
init
()
147
148
#map()isamethodformakingtheconversion
149
#betweencoordinatesinthesourceandcoordinates
150
#inthedestination
151
defmap
(self,point):
152
n=self.source.normalize(point)
153
154
return
self.destination.scaleAndTranslate(n)
155
#map()
156
#Transform
157
158
#normalize()isafunctionforproducinganumpy
159
#arraywhoseelementsareall8bitunsignedintegers
160
#fromanumpyarrayswhoseelementsareallfloating
161
#pointvalues.
162
def
normalize(values):
163
minimum=values.
min
()
164
maximum=values.
max
()
165
166
fun=
lambda
x:256

(x

minimum)/(maximum

minimum)
167
168
return
fun(values)
169
#normalize()
170
171
def
main():
172
#Printamessagejusttoconfirmthatthe
173
#programisworking.
4
174
print
("Guten
Tag!")
175
176
#Createanumpyarrayoftherightsizeand
177
#fillitwithzeros.
178
amplitudes=np.zeros((WIDTH,HEIGHT))
179
180
#Defineourworldcoordinatesystemand
181
#ourdevicecoordinatesystem.
182
#Theworldcoordinatesystemisasystemthat
183
#wechooseforourconvenience.
184
#Wewilldoallofourgeometriccalculations
185
#intheworldcoordinatesystem.
186
#Thedevicecoordiantesystemcorrespondstothe
187
#windowinwhichtheimagewillappearonthe
188
#computer'sscreen.
189
world=CoordinateSystem(

1.0,

1.0,+1.0,+1.0)
190
device=CoordinateSystem(0,0,WIDTH,HEIGHT)
191
192
device2world=Transform(device,world)
193
194
195
#Definethewaves.
196
197
#TO

DO:Experimentwithdifferentvaluesfor
198
#numberOfWaves,radius,cx,andcy.
199
200
pattern=InterferingWaves()
201
202
numberOfWaves=4
203
204
radius=0.4
205
206
cx=0.0
207
cy=0.0
208
209
for
k
inrange
(numberOfWaves):
210
angle=2.0

np.pi

k/numberOfWaves
211
x=cx+radius

np.cos(angle)
212
y=cy+radius

np.sin(angle)
213
214
center=Point(x,y)
215
216
#TO

DO:Experimentwithdifferentvalues
217
#foramplitude,wavelength,andphase.
218
#Thesearethelast3argumentsofthe
219
#thisconstructor.
5
220
wave=Wave(center,1.0,0.2,0.0)
221
222
pattern.addWave(wave)
223
224
#Computetheheightofthewater
225
#ateverypointintheimage.
226
for
row
inrange
(HEIGHT):
227
for
column
inrange
(WIDTH):
228
u=Point(column,row)
229
v=device2world.
map
(u)
230
231
h=pattern.height(v)
232
amplitudes[row,column]=h
233
234
235
#Normalizeheights(thatis,expressallvaluesona
236
#scaleof0.0to1.0),multiplyby256,andconvert
237
#floatingpointvaluestounsignedintegers.
238
normalizedAmplitudes=normalize(amplitudes).astype(np.uint8)
239
240
print
(normalizedAmplitudes.dtype)
241
242
#Createagray

scaleimagefromthearray.
243
#TO

DO:Experimentwithmodesotherthan"L"
244
#andwithotheralgorithmsforassigningcolors
245
#topixels.Youmightfindthisverychallenging.
246
#Idonotexpecteveryonetocompletethistask.
247
image=Image.fromarray(normalizedAmplitudes,"L")
248
image.show()
249
250
#main()
251
252
if
name
=='
main
':
253
main()
6
